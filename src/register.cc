#include "register.h"
using gameboy::FlagName;
using gameboy::Register;
using gameboy::RegisterName;

// Getter and setter for 8-bit registers: A F B C D E H L
uint8_t Register::get_register_byte(RegisterName name)
{
    return register_byte[name];
}

void Register::set_register_byte(RegisterName name, uint8_t byte)
{
    register_byte[name] = byte;
}

// Getter and setter: F at register_byte[r_f], once a bit
bool Register::get_flag(FlagName flag)
{
    return (register_byte[r_f] & flag);
}

void Register::set_flag(FlagName flag, bool flag_status)
{
    if (flag_status)
    {
        register_byte[r_f] |= flag;
    }
    else
    {
        register_byte[r_f] &= (~flag);
    }
}

// Getter and setter for 16-bit registers: SP PC
uint16_t Register::get_register_word(RegisterName name)
{
    return register_word[name];
}

void Register::set_register_word(RegisterName name, uint16_t word)
{
    register_word[name] = word;
}

// Some instructions allow you to use the registers A B C D E H L as 16-bit registers
// by pairing them up in the following manner: AF BC DE HL
uint16_t Register::get_register_byte_pair(RegisterName first, RegisterName second)
{
    uint16_t paired_first = ((register_byte[first] << 8) & 0xffff);
    uint16_t paired_second = (register_byte[second] & 0xffff);
    return (paired_first + paired_second);
}

void Register::set_register_byte_pair(RegisterName first, RegisterName second, uint16_t word)
{
    uint8_t splited_first = ((word >> 8) & 0xff);
    uint8_t splited_second = (word & 0xff);
    register_byte[first] = splited_first;
    register_byte[second] = splited_second;
}

// Initialize all register status when power on
Register &Register::power_on()
{
    set_register_byte(r_a, 0x01);
    set_register_byte(r_f, 0xb0);
    set_register_byte(r_b, 0x00);
    set_register_byte(r_c, 0x13);
    set_register_byte(r_d, 0x00);
    set_register_byte(r_e, 0xd8);
    set_register_byte(r_h, 0x01);
    set_register_byte(r_l, 0x4d);

    // The GameBoy stack pointer is initialized to 0xfffe on power up but a programmer
    // should not rely on this setting and rather should explicitly set its value
    set_register_word(r_sp, 0xfffe);

    // On power up, the GameBoy Program Counter is initialized to 0x0100 and the instruction
    // found at this location in ROM is executed. The Program Counter from this point on is
    // controlled, indirectly, by the program instructions themselves that were generated by
    // the programmer of the ROM cart.
    set_register_word(r_pc, 0x0100);

    return *this;
}